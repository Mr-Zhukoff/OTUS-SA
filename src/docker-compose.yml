services:
  usersservice:
    image: ${DOCKER_REGISTRY-}usersservice
    depends_on:
      - usersdb
    build:
      context: .
      dockerfile: UsersService/Dockerfile
    ports:
        - "8080:8080"
    # depends_on:
    #     prometheus:
    #         condition: service_healthy
    #     grafana:
    #         condition: service_healthy
    #     usersdb:
    #         condition: service_started

  billingservice:
    image: ${DOCKER_REGISTRY-}billingservice
    depends_on:
      - billingdb
    build:
      context: .
      dockerfile: BillingService/Dockerfile
    ports:
      - "8081:8080"

  notificationsservice:
    image: ${DOCKER_REGISTRY-}notificationsservice
    depends_on:
      - notificationsdb
    build:
      context: .
      dockerfile: NotificationsService/Dockerfile
    ports:
       - "8082:8080"

  ordersservice:
    image: ${DOCKER_REGISTRY-}ordersservice
    depends_on:
      - ordersdb
    build:
      context: .
      dockerfile: OrdersService/Dockerfile
    ports:
      - "8083:8080"
    environment:
      - BILLINGSVC_URL=http://billingservice:8080
      - USERSSVC_URL=http://usersservice:8080
      - NOTIFICATIONSSVC_URL=http://notificationsservice:8080
      - SEQ_URL=http://seq:5341

  productsservice:
    image: ${DOCKER_REGISTRY-}productsservice
    build:
      context: .
      dockerfile: ProductsService/Dockerfile
    ports:
      - "8084:8080"
    environment:
      - PG_CONN_STR=Host=productsdb;Port=5432;Database=products;Username=pguser;Password=12345678
      - BILLINGSVC_URL=http://billingservice:8080
      - USERSSVC_URL=http://usersservice:8080
      - NOTIFICATIONSSVC_URL=http://notificationsservice:8080
      - SEQ_URL=http://seq:5341

  deliveryservice:
    image: ${DOCKER_REGISTRY-}deliveryservice
    build:
      context: .
      dockerfile: DeliveryService/Dockerfile
    ports:
      - "8085:8080"
    environment:
      - PG_CONN_STR=Host=deliverydb;Port=5432;Database=deliveries;Username=pguser;Password=12345678
      - BILLINGSVC_URL=http://billingservice:8080
      - USERSSVC_URL=http://usersservice:8080
      - NOTIFICATIONSSVC_URL=http://notificationsservice:8080
      - SEQ_URL=http://seq:5341

  hangfireservice:
    image: ${DOCKER_REGISTRY-}hangfireservice
    build:
      context: .
      dockerfile: HangfireBackgroundJob/Dockerfile
    ports:
    - "8089:8080"
    environment:
      - ORDERS_CONN_STR=Host=ordersdb;Port=5432;Database=orders;Username=pguser;Password=12345678
      - NOTIFICATIONS_CONN_STR=Host=notificationsdb;Port=5432;Database=notifications;Username=pguser;Password=12345678
      - KAFKA_URL=kafka:9093
      - BILLINGSVC_URL=http://billingservice:8080
      - USERSSVC_URL=http://usersservice:8080
      - SEQ_URL=http://seq:5341

  usersdb:
    image: postgres:17.0
    container_name: usersdb
    environment:
      - POSTGRES_DB=users
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=12345678
    volumes:
      - ./.postgress/users:/var/lib/postgresql/data
    ports:
      - 5432:5432

  billingdb:
    image: postgres:17.0
    container_name: billingdb
    environment:
      - POSTGRES_DB=billing
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=12345678
    volumes:
      - ./.postgress/billing:/var/lib/postgresql/data
    ports:
      - 5433:5432

  notificationsdb:
    image: postgres:17.0
    container_name: notificationsdb
    environment:
      - POSTGRES_DB=notifications
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=12345678
    volumes:
      - ./.postgress/notifications:/var/lib/postgresql/data
    ports:
      - 5434:5432

  ordersdb:
    image: postgres:17.0
    container_name: ordersdb
    environment:
      - POSTGRES_DB=orders
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=12345678
    volumes:
      - ./.postgress/orders:/var/lib/postgresql/data
    ports:
      - 5435:5432

  productsdb:
    image: postgres:17.0
    container_name: productsdb
    environment:
      - POSTGRES_DB=products
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=12345678
    volumes:
      - ./.postgress/products:/var/lib/postgresql/data
    ports:
      - 5436:5432

  deliverydb:
    image: postgres:17.0
    container_name: deliverydb
    environment:
      - POSTGRES_DB=deliveries
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=12345678
    volumes:
      - ./.postgress/delivery:/var/lib/postgresql/data
    ports:
      - 5437:5432

  seq:
    image: datalust/seq:latest
    container_name: seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:5341"
      - "8088:80"

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #   depends_on:
  #     prometheus:
  #       condition: service_healthy
  #   healthcheck:
  #     test: wget -q --tries=1 -O- http://localhost:3000/
  #     interval: 3s
  #     timeout: 3s
  #     retries: 10
  #     start_period: 10s

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   restart: always
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   healthcheck:
  #       test: wget -q --tries=1 -O- http://localhost:9090/
  #       interval: 3s
  #       timeout: 3s
  #       retries: 10
  #       start_period: 10s

  # zookeeper:
  #   image: zookeeper:latest
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # kafka:
  #   image: apache/kafka-native
  #   container_name: kafka
  #   # depends_on:
  #   #   - zookeeper
  #   ports:
  #     - 9092:9092
  #   environment:
  #     # Configure listeners for both docker and host communication
  #     KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
  #     KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

  #     # Settings required for KRaft mode
  #     KAFKA_NODE_ID: 1
  #     KAFKA_PROCESS_ROLES: broker,controller
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

  #     # Listener to use for broker-to-broker communication
  #     KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

  #     # Required for a single node cluster
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

