strategyType: Recreate

userservice:
  name: userservice
  app: userservice
  replicaCount: 2
  restartPolicy: Always
  hostname: userservice
  strategyType: Recreate
  container:
    repository: zhukoffg/userserviceapi:1.6
    pullPolicy: Always
    port: 8080
    protocol: TCP
  configMapRef:
    name: userservice-conf
    pgConnStr: Host=postgres;Port=5432;Database=users;Username=pguser;Password=12345678
  service:
    port: 8080
    protocol: TCP
    targetPort: 8080
  ingress:
    className: nginx
    host: arch.homework

postgres:
  name: postgres
  app: postgres
  replicaCount: 2
  volumeName: postgres-pv-storage
  volumeStorageCapacity: 5Gi
  claimName: postgres-pv-claim
  secretsName: postgres-secret-config
  strategyType: Recreate
  container:
    repository: postgres:14-alpine
    pullPolicy: IfNotPresent
    port: 5432
    protocol: TCP
  configMapRef:
    name: userservice-conf
  service:
    type: NodePort
    port: 5432
    protocol: TCP
    targetPort: 5432
  envs:
    dbName: users
    dbUser: pguser



imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: arch.homework
      paths:
        - path: /
          pathType: ImplementationSpecific

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
